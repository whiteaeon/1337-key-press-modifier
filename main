import keyboard
import threading
import time
import ctypes
import win32api
import json


terminate = False

with open("1337 key press modifier\config.json") as config_file:
    config = json.load(config_file)
    key_mapping = config['key_mapping']

def keyboard_layout():
    user32 = ctypes.windll.user32
    hwnd = user32.GetForegroundWindow()
    thread_id = user32.GetWindowThreadProcessId(hwnd, None)
    layout_id = win32api.GetKeyboardLayout(thread_id)
    return layout_id

def english_layout():
    layout_id = keyboard_layout()
    eng_layout_id = 0x0409
    primary_lang_id = layout_id & 0xFFFF
    is_english = primary_lang_id == eng_layout_id
    return is_english

def modify_key(event):
    global terminate
    
    if event.name == 'esc':
        terminate = True
        return False

    if keyboard.is_pressed('ctrl') or keyboard.is_pressed('alt') or keyboard.is_pressed('shift'):
        return True

    if not english_layout():
        return True

    key_name = event.name
    if key_name.isupper():
        key_name = key_name.lower()

    if event.event_type == keyboard.KEY_DOWN and key_name in key_mapping:
        keyboard.press_and_release(key_mapping[key_name])
        return False 
    return True

def start_kb_listener():
    try:
        keyboard.on_press(modify_key, suppress=True)  #suppresses the original key
        while not terminate:
            time.sleep(0.1)
    except Exception as e:
        print(f'An error occurred: {e}')
    finally: 
        keyboard.unhook_all()
        

if __name__ == "__main__":
    listener_thread = threading.Thread(target=start_kb_listener)
    listener_thread.daemon = True
    listener_thread.start()

    try:
        while not terminate:
            time.sleep(0.1)
    except KeyboardInterrupt:
        print('Program has been terminated')
    finally:
        terminate = True
        listener_thread.join()
        print('Program has been terminated')
